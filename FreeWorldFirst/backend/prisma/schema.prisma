generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(uuid())
  username    String        @unique
  email       String        @unique
  password    String
  isAdmin     Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  alternatives Alternative[] @relation("SubmittedBy")
  comments    Comment[]     
  votes       Vote[]
}

model Alternative {
  id          String        @id @default(uuid())
  title       String
  replaces    String
  description String
  reasons     String
  benefits    String
  website     String?
  category    String
  upvotes     Int           @default(0)
  approved    Boolean       @default(false)
  submitter   User          @relation("SubmittedBy", fields: [submitterId], references: [id])
  submitterId String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  comments    Comment[]
  votes       Vote[]
}

model Comment {
  id            String      @id @default(uuid())
  content       String
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  alternative   Alternative @relation(fields: [alternativeId], references: [id])
  alternativeId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Vote {
  id            String      @id @default(uuid())
  type          String      // "upvote" oder "downvote"
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  alternative   Alternative @relation(fields: [alternativeId], references: [id])
  alternativeId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([userId, alternativeId])
}
